<?php

/**
 * @file
 * Contains implementation for lp project status.
 */

/**
 * Implements hook_theme().
 */
function lp_project_status_theme($existing, $type, $theme, $path) {
  return [
    'lp_project_status_block' => [
      'variables' => [
        'project_status' => '',
        'project_price' => '',
        'project_duration' => '',
      ],
    ],
  ];
}
/**
 * Alter Solr documents before they are sent to Solr for indexing.
 *
 * @param \Solarium\QueryType\Update\Query\Document\Document[] $documents
 *   An array of \Solarium\QueryType\Update\Query\Document\Document objects
 *   ready to be indexed, generated from $items array.
 * @param \Drupal\search_api\IndexInterface $index
 *   The search index for which items are being indexed.
 * @param \Drupal\search_api\Item\ItemInterface[] $items
 *   An array of items to be indexed, keyed by their item IDs.
 */
// function lp_project_status_search_api_solr_documents_alter(&$documents, \Drupal\search_api\IndexInterface $index, array $items) {
//   // Adds a "foo" field with value "bar" to all documents.
//   //\Drupal::logger('datasource')->notice("workinga");
//   /*
//   foreach ($documents as $document) {
//     $document->setField('foo', 'bar');
//   }
//   */
// }


// function lp_project_status_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
//   //\Drupal::logger('blocking')->notice("workinga " . serialize($build));
//   //\Drupal::logger('blocking')->notice("workingb " . serialize($block->getBaseId()));
//   // Remove the contextual links on all blocks that provide them.
//   // if (isset($build['#contextual_links'])) {
//   //   unset($build['#contextual_links']);
//   // }
// }


function lp_project_status_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  if (($view->storage->id() == 'iqbal_testing_this_project') && ($view->current_display == 'page_1' )) {
    //\Drupal::logger('dddd')->notice("workinga before " . serialize($variables['output']->__toString()));
    \Drupal::logger('dddd')->notice("workinga before " . serialize($variables['output']));
    //$variables['output']->create() = "hello";
    \Drupal::logger('dddd')->notice("my field " . serialize($field->field));
    $variables['output'] = "hiiii" . $variables['output'];
    //$variables['output']->markup = \Drupal\Core\Render\Markup::create('News output');
    //$variables['output']->markup = "abc";
    //\Drupal::logger('dddd')->notice("workinga after" . serialize($variables['output']));
    
    //MarkupTrait::__toString
  }
  // if ($view->storage->id() == 'this_project_include' &&
  // $view->current_display == 'id' &&
  // $field->field == 'nid') {
  // //$variables['output'] = '3';
  // }  
}



/**
 * Implements hook_preprocess_views_view_field().
 */
// function lp_project_status_preprocess_views_view_field(&$variables) {
//   $view = $variables['view'];
//   if ($view->id() == 'this_project_include') {
//     if ($view->current_display == 'block_1') {
//         $variables['output'] = 'awdaDAWDawd';
//     }
//   }
// }


// function lp_project_status_node_view($node, $view_mode = 'this_project_includes', $langcode = NULL) {
//     if( $view_mode == 'this_project_includes' ){
//       \Drupal::logger('dddd')->notice("this_project_includes ");
//       /*
//         if( some conditions here ){
//             $node->content['field_title_nickname'] = array(
//                 '#markup' => '<div>A new nickname title 2x</div>'
//             );
//         }
//         */
//     }
// }


// function lp_project_status_preprocess_views_view_field(&$variables) {
//   $view = $variables['view'];
//   $field = $variables['field'];
//   $row = $variables['row'];
//   if ($view->storage->id() == 'this_project_include' &&
//   $view->current_display == 'block_1' &&
//   $field->field == 'this_project_include') {
//     $variables['output'] = 'News output';
//     // Example of inline styling
//     $value = $field->getValue($row);
//     $markup = [
//       '#type' => 'inline_template',
//       '#template' => '{{ yourvar }} {{ yourhtml | raw }}',
//       '#context' => [
//         'yourvar' => 'abc',
//         'yourhtml' => '<span style="color:red;">Your HTML</span>',
//       ],
//     ];
//     $variables['output'] = $markup;
//   }
// }


// function  lp_project_status_preprocess_views_view_field(&$variables) {
//   $view = $variables['view'];
//   $field = $variables['field'];
//   if ($view->storage->id() == 'this_project_include' &&
//   $view->current_display == 'block_1' &&
//   $field->field == 'this_project_include') {
//     $variables['output'] = 'News output';
//   }

//   if ($view->storage->id() == 'viewname' &&
//   $view->current_display == 'pageid' &&
//   $field->field == 'nid') {
//     //$variables['output'] = '3';
//   }
// }


// function lp_project_status_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
//   if ($build['#view_mode'] == 'this_project_includes') {
//     //\Drupal::logger('eee')->notice("iqbal testing " . serialize($build['_layout_builder'][0]['content']['3615d11e-a93a-4fd5-b7cd-87100abebbca']));
//     // Change its weight.
//     //$build['an_additional_field']['#weight'] = -10;

//     // Add a #post_render callback to act on the rendered HTML of the entity.
//     //$build['#post_render'][] = 'my_module_node_post_render';

//    \Drupal::logger('eee')->notice("iqbal testing " . serialize($build['#node']->get('field_related_donor')->getValue()));

//   }
// }



// function lp_project_status_entity_display_build_alter(&$build, $context) {
//   if(($context['entity'] == "node") && ($context['view_mode'] == "this_project_includes")) {

//     // // Append RDF term mappings on displayed taxonomy links.
//     // foreach (Element::children($build) as $field_name) {
//     //   $element =& $build[$field_name];
//     //   if ($element['#field_type'] == 'entity_reference' && $element['#formatter'] == 'entity_reference_label') {
//     //     foreach ($element['#items'] as $delta => $item) {
//     //       $term = $item->entity;
//     //       if (!empty($term->rdf_mapping['rdftype'])) {
//     //         $element[$delta]['#options']['attributes']['typeof'] = $term->rdf_mapping['rdftype'];
//     //       }
//     //       if (!empty($term->rdf_mapping['name']['predicates'])) {
//     //         $element[$delta]['#options']['attributes']['property'] = $term->rdf_mapping['name']['predicates'];
//     //       }
//     //     }
//     //   }
//     // }
// \Drupal::logger('ff')->notice("this_project_includes ");

//   }
// }



// function lp_project_status_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
//   if ($build['#view_mode'] == 'this_project_includes') {
//     //\Drupal::logger('eee')->notice("iqbal testing " . serialize($build['_layout_builder'][0]['content']['3615d11e-a93a-4fd5-b7cd-87100abebbca']));
//     // Change its weight.
//     //$build['an_additional_field']['#weight'] = -10;

//     // Add a #post_render callback to act on the rendered HTML of the entity.
//     //$build['#post_render'][] = 'my_module_node_post_render';

//    //\Drupal::logger('eee')->notice("iqbal testing " . serialize($build['#node']));
//     $build['#post_render'][] = 'wiki_feature_node_post_render';
//     return $build; 
//   }
// }


// function wiki_feature_node_post_render(){
//   $h = new WikiFeatureHelper();
//   $arg_list = func_get_args();
//   $html = $arg_list[0];
//   $html_with_anchors = $h::addAnchorsToHeadings($html,5);
//   return $html_with_anchors;
//}